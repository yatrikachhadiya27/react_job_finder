{"ast":null,"code":"var _jsxFileName = \"D:\\\\Download\\\\job-portal-project-master\\\\job-portal-project-master\\\\job-frontend\\\\src\\\\components\\\\UI\\\\ChangePassword.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Form as BootStrapForm, Button } from \"react-bootstrap\";\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport classes from \"./Changepassword.module.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst MyTextInput = _ref => {\n  _s();\n\n  let {\n    label,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BootStrapForm.Group, {\n      className: `${classes.formBox} mb-2`,\n      children: [/*#__PURE__*/_jsxDEV(BootStrapForm.Label, {\n        htmlFor: props.id || props.name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BootStrapForm.Control, {\n        className: meta.touched && meta.error && \"invalid\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst ChangePassword = () => {\n  _s2();\n\n  const selectauthToken = rootstate => rootstate.authToken;\n\n  const authToken = useSelector(selectauthToken);\n  console.log(authToken);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        oldPassword: \"\",\n        newPassword: \"\",\n        passwordConfirmation: \"\"\n      },\n      validationSchema: Yup.object({\n        oldPassword: Yup.string() // .oneOf([authToken.password], \"Wrong Password\")\n        .required(\"Old Password Required\"),\n        newPassword: Yup.string() // .notOneOf(\n        //   [authToken.password],\n        //   \"New Password should not be same as old Password\"\n        // )\n        .required(\"New Password Required\"),\n        passwordConfirmation: Yup.string().oneOf([Yup.ref(\"newPassword\")], \"Password mismatch\").required(\"Confirm New Password Required\")\n      }),\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n        toast.success(\"Password Changed Successfully\", {\n          position: \"bottom-right\",\n          autoClose: 4000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-center text-primary\",\n            children: \"Change Password!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Old Password\",\n            name: \"oldPassword\",\n            type: \"password\",\n            id: \"oldPassword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"New Password\",\n            name: \"newPassword\",\n            type: \"password\",\n            id: \"newPassword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Confirm New Password\",\n            name: \"passwordConfirmation\",\n            type: \"password\",\n            id: \"confirmPassword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s2(ChangePassword, \"4nbP1NPoVN+NqRqUhW7/mqHfHlg=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = ChangePassword;\nexport default ChangePassword;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"ChangePassword\");","map":{"version":3,"sources":["D:/Download/job-portal-project-master/job-portal-project-master/job-frontend/src/components/UI/ChangePassword.jsx"],"names":["React","useSelector","Form","BootStrapForm","Button","Formik","useField","Yup","classes","toast","configure","MyTextInput","label","props","field","meta","formBox","id","name","touched","error","ChangePassword","selectauthToken","rootstate","authToken","console","log","oldPassword","newPassword","passwordConfirmation","object","string","required","oneOf","ref","values","setSubmitting","setTimeout","alert","JSON","stringify","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","formContainer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Form as BootStrapForm, Button } from \"react-bootstrap\";\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport classes from \"./Changepassword.module.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <BootStrapForm.Group className={`${classes.formBox} mb-2`}>\n        <BootStrapForm.Label htmlFor={props.id || props.name}>\n          {label}\n        </BootStrapForm.Label>\n        <BootStrapForm.Control\n          className={meta.touched && meta.error && \"invalid\"}\n          {...field}\n          {...props}\n        />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n      </BootStrapForm.Group>\n      {/* <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null} */}\n    </>\n  );\n};\n\nconst ChangePassword = () => {\n  const selectauthToken = (rootstate) => rootstate.authToken;\n  const authToken = useSelector(selectauthToken);\n  console.log(authToken);\n  return (\n    <>\n      <Formik\n        initialValues={{\n          oldPassword: \"\",\n          newPassword: \"\",\n          passwordConfirmation: \"\",\n        }}\n        validationSchema={Yup.object({\n          oldPassword: Yup.string()\n            // .oneOf([authToken.password], \"Wrong Password\")\n            .required(\"Old Password Required\"),\n          newPassword: Yup.string()\n            // .notOneOf(\n            //   [authToken.password],\n            //   \"New Password should not be same as old Password\"\n            // )\n            .required(\"New Password Required\"),\n          passwordConfirmation: Yup.string()\n            .oneOf([Yup.ref(\"newPassword\")], \"Password mismatch\")\n            .required(\"Confirm New Password Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n          toast.success(\"Password Changed Successfully\", {\n            position: \"bottom-right\",\n            autoClose: 4000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }}\n      >\n        <Form>\n          <div className={classes.formContainer}>\n            <h4 className=\"text-center text-primary\">Change Password!</h4>\n\n            <MyTextInput\n              label=\"Old Password\"\n              name=\"oldPassword\"\n              type=\"password\"\n              id=\"oldPassword\"\n            />\n            <MyTextInput\n              label=\"New Password\"\n              name=\"newPassword\"\n              type=\"password\"\n              id=\"newPassword\"\n            />\n            <MyTextInput\n              label=\"Confirm New Password\"\n              name=\"passwordConfirmation\"\n              type=\"password\"\n              id=\"confirmPassword\"\n            />\n            <Button type=\"submit\">Submit</Button>\n          </div>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}